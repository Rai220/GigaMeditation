import json
import os
import time
import uuid

import langchain
import requests
import streamlit as st
from langchain.chat_models.gigachat import GigaChat
from langchain.schema import HumanMessage, SystemMessage

import retrying

gigachat_user = os.environ.get("GIGA_USER", None)
gigachat_password = os.environ.get("GIGA_PASSWORD", None)
tts_auth = os.environ.get("TTS_AUTH", None)
giga_url = os.environ.get("GIGA_URL", None)


model = GigaChat(
    base_url="https://beta.saluteai.sberdevices.ru/v1",
    user=gigachat_user,
    password=gigachat_password,
    verify_ssl=False,
    api_base_url=giga_url,
    model="GigaChat-Pro"
)

@retrying.retry(stop_max_attempt_number=3, wait_fixed=1000)
def _generate_text(topic, backgound):
    return model(
        [
            HumanMessage(
                content=f"–ü—Ä–∏–¥—É–º–∞–π –¥–ª–∏–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ–∞–Ω—Å–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ú–µ–¥–µ—Ç–∏—Ä—É—é—â–∏–π –±—É–¥–µ—Ç —Å–ª—ã—à–∞—Ç—å {backgound}. –¢–µ–º–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ - {topic}. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π. –ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É."
            )
        ]
    ).content.replace("\n", "")

@retrying.retry(stop_max_attempt_number=3, wait_fixed=1000)
def _get_tts_token():
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

    payload = "scope=SALUTE_SPEECH_CORP"
    headers = {
        "RqUID": "6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e",
        "Content-Type": "application/x-www-form-urlencoded",
        "Authorization": tts_auth,
    }

    response = requests.request(
        "POST", url, headers=headers, data=payload, verify=False, timeout=30
    )

    if response.ok:
        return response.json()["access_token"]

    print(response)
    st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ —Å–∏–Ω—Ç–µ–∑–∞ üò¢")
    st.stop()
    return None

@retrying.retry(stop_max_attempt_number=3, wait_fixed=1000)
def _get_audio(text, backgound, token):
    url = "https://smartspeech.sber.ru/rest/v1/text:synthesize?format=opus&voice=Bsa_24000"

    payload = f'<extra.background-audio src="{backgound}" volume="0.7" loop="crossfade">{text}</extra.background-audio>'
    headers = {"Content-Type": "application/ssml", "Authorization": f"Bearer {token}"}

    response = requests.request(
        "POST",
        url,
        headers=headers,
        data=payload.encode("utf-8"),
        timeout=6000,
        verify=False,
    )
    if response.ok:
        return response.content
    else:
        print("Code: " + str(response.status_code))
        print(response.content)
        st.info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ üò¢")
        st.stop()
        return None


def start_btn():
    st.session_state.started = True

st.set_page_config(
    page_title="GigaZen üßòüèª‚Äç‚ôÄÔ∏è",
    page_icon="üßòüèª‚Äç‚ôÄÔ∏è",
    menu_items={
        'About': "# This is an *extremely* cool app, developed by @Krestnikov",
    }
)

st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GigaZen üßòüèª‚Äç‚ôÄÔ∏è")
st.subheader("–ì–∏–≥–∞–ß–∞—Ç –∏ SaluteSpeech –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é.")

topic = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä '–≤–µ—Å–µ–Ω–Ω–∏–π —Å–∞–¥' –∏–ª–∏ '–Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å')",
    value="—É—Ç—Ä–æ –Ω–∞ –º–æ—Ä–µ",
)
sounds = {
    "–ú–æ—Ä–µ": "sm-sounds-nature-sea-2",
    "–†—É—á–µ–π": "sm-sounds-nature-stream-2",
    "–î–æ–∂–¥—å": "sm-sounds-nature-rain-2",
    "–õ–µ—Å": "sm-sounds-nature-forest-2",
    "–ö–∞–º–∏–Ω": "sm-sounds-nature-fire-2",
}
genre = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫–æ–≤–æ–π —Ñ–æ–Ω –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏", sounds.keys())
backgound = sounds[genre]

if st.button(
    "–°–æ–∑–¥–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é",
    on_click=start_btn,
    disabled=st.session_state.get("started", False),
):
    with st.status(
        f"–°–æ–∑–¥–∞—é –º–µ–¥–∏—Ç–∞—Ü–∏—é, —ç—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–∫–∞ —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ—Å—å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –≤–æ–ª–Ω—É ",
        expanded=True,
    ) as status:
        st.write("–ü–∏—à—É —Ç–µ–∫—Å—Ç...")
        meditation_text = _generate_text(topic, genre)
        st.write("–ü–æ–¥–∫–ª—é—á–∞—é —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏...")
        token = _get_tts_token()
        st.write("–ó–∞–ø–∏—Å—ã–≤–∞—é –∑–≤—É–∫...")
        data = _get_audio(meditation_text, backgound, token)
        status.update(
            label="–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!", state="complete", expanded=False
        )

    st.info("–í–∞—à–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!")
    st.audio(data, format="audio/wav")
    st.balloons()
